-- functions from prev

flatten [] = []
flatten (x:rest) = x ++ flatten(rest)
comp (s,r) a = fixlist(flatten (map s (r a)))

relcomp n r = if (n == 1)
			  then r
			  else comp(r,relcomp (n-1) r)
			
inlist a [] = False
inlist a (x:rest) = if (a == x)
				    then True
				    else inlist a (rest)  
fixlist [] = []
fixlist (x:rest) = if (inlist x (rest))
				   then fixlist (rest)
				   else [x] ++ fixlist(rest)

reflexrel r a = fixlist (r a ++ [a])


trans2 1 rel a = rel a
trans2 n rel a = (relcomp n rel a) ++ (trans2 (n-1) rel a)

transrel2 n rel a= fixlist(trans2 n rel a)

transrelnew r rlist a = transrel2 (length  rlist) (r rlist) a

reflexrelnew r rlist a = reflexrel (r rlist) a

posetr r rlist a = fixlist (transrelnew r rlist a ++ reflexrelnew r rlist a)

interlist l1 [] = []
interlist [] l2 = []
interlist (x:rest) l2 = if (inlist x l2)
						then [x] ++ interlist rest l2
						else interlist rest l2
						
-- lists from prev lab

rlist = [1,2,3,4]
slist = [1,2,3,4]
plist = [1,2,3,4]
qlist = [1,2,3,4,5,6,7,8]

r rlist 1 = [2,4]
r rlist 2 = [3]
r rlist 3 = [4]
r rlist 4 = []

s slist 1 = [2]
s slist 2 = [3,4]
s slist 3 = []
s slist 4 = []

p plist 1 = [3]
p plist 2 = [3]
p plist 3 = [4]
p plist 4 = []

q qlist 1 = [3]
q qlist 2 = [4]
q qlist 3 = [5]
q qlist 4 = [6]
q qlist 5 = [7]
q qlist 6 = [7]
q qlist 7 = [8]
q qlist 8 = []

-- new list

mlist = [1,2,3,4,5,6,7]

m mlist 1 = [4]
m mlist 2 = [3]
m mlist 3 = [5]
m mlist 4 = [5]
m mlist 5 = [6,7]
m mlist 6 = []
m mlist 7 = []

-- 2

upr r rlist a = posetr r rlist a

maxr r rlist [] = 100
maxr r rlist [x] = x
maxr r rlist (x:y:rest) = if inlist x (upr r rlist y)
						  then maxr r rlist (x:rest)
						  else if inlist y (upr r rlist x)
						  then maxr r rlist (y:rest)
						  else maxr r rlist (interlist rest (interlist (upr r rlist y) (upr r rlist x)))

-- 3

down r rlist a [] = []
down r rlist a (x:rest) = if inlist a (upr r rlist x)
						  then [x] ++ down r rlist a rest
						  else down r rlist a rest
						  
downr r rlist a = down r rlist a rlist

minr r rlist [] = -1
minr r rlist [x] = x
minr r rlist (x:y:rest) = if inlist x (downr r rlist y)
						  then minr r rlist (x:rest)
						  else if inlist y (downr r rlist x)
						  then minr r rlist (y:rest)
						  else minr r rlist (interlist rest (interlist (downr r rlist y) (downr r rlist x)))
						  
--4

sup r rlist (a,b) = if (interlist (upr r rlist a) (upr r rlist b)) == []
					then 100
					else minimum (interlist (upr r rlist a) (upr r rlist b))
					
inf r rlist (a,b) = if (interlist (downr r rlist a) (downr r rlist b)) == []
					then -1
					else maximum (interlist (downr r rlist a) (downr r rlist b))
					
--5

posetsup r rlist [] = 100
posetsup r rlist [x] = x
posetsup r rlist (x:y:rest) = posetsup r rlist ((sup r rlist (x,y)):rest)

posetsup2 r rlist = posetsup r rlist rlist

posetinf r rlist [] = -1
posetinf r rlist [x] = x
posetinf r rlist (x:y:rest) = posetinf r rlist ((inf r rlist (x,y)):rest)

posetinf2 r rlist = posetinf r rlist rlist

-- challenge problem
-- returns 1 if distributive, -1 if not

checkdist r rlist = checkdistHelp r rlist rlist

checkdistHelp r rlist [] = -1
checkdistHelp r rlist [x] = 1
checkdistHelp r rlist [x,y] = if inlist (sup r rlist (x,y)) [x,y]
							  then 1
							  else -1
checkdistHelp r rlist (x:y:z:rest) = if not (inf r rlist (x,(sup r rlist (y,z))) == sup r rlist ((inf r rlist (x,y)),(inf r rlist (y,z))))
									 then -1
									 else if checkdistHelp r rlist (x:z:rest) == 1
									 then 1
									 else if checkdistHelp r rlist (x:y:rest) == 1
									 then 1
									 else if checkdistHelp r rlist (y:z:rest) == 1
									 then 1
									 else checkdistHelp r rlist rest
									 
distlist = [1,2,3,4]

d distlist 1 = [2,3]
d distlist 2 = [4]
d distlist 3 = [4]
d distlist 4 = []
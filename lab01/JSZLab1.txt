{- 1:
Haskell returns the input, whether it be an int a list or a real.Also if a fraction is input, the decimal value is returned.
-}
{-
Main> 1
1
-}
{-
Main> [1]
[1]
-}
{-
Main> 1.5
1.5
-}

{- 2:
 Haskell retuns the input (int, list, real) along with a description of the input type, ex the function brings a num a to type a -}
{-
Main> :type 1
1 :: Num a => a
-}
{-
Main> :type [1]
[1] :: Num a => [a]
-}
{-
Main> :type 1.5
1.5 :: Fractional a => a
-}

{- 3:
When an ordered pair is input (and the :type command is used), Haskell will return the ordered pair in addition to a
description of its type, including a description of each type of input within the ordered pair. This is essentially AxB and is therefore of type AxB -> A).
-}
{-
Main> :type (1,1.5)
(1,1.5) :: (Fractional a, Num b) => (b,a)
-}

{- 4:
These functions double or triple the input respectively, aslong as the type is numerical
-}

double x = 2 * x

{-
Main> double 2
4
-}

{-Main> double 2.5
5.0
-}

{-
Main> double 1/4
0.5
-}

triple x = 3 * x

{-
Main> triple 1
3
-}

{-
Main> triple 2.5
7.5
-}

{- 5: 
add can be defined as x y = x + y or (x,y) = x + y or [x,y] = x + y, if defined the latter two ways, the function handles fractions well whereas if defined the first way it does not. Type structure is that function add takes two numbers and returns a third. 
add (2,2) :: Num a => a

-}

add (x, y) = x + y

{-
Main> add 2 3
5
-}
{- ***not correct***
Main> add 4 1/2
2.5
-}
{- ***correct***
Main> add (4, 1/2)
4.5
-}

{- 6: Type structure: fact x takes a number and returns a number. fact 3 :: Num a => a
-}

fact 0 = 1
fact x = x * (fact (x-1))

{- 7:
-}

boolval1 =  (3 == 4)

{-
Main> boolval1
False
Main> not boolval1
True
-}

{-8: 
-}

first (x, y) = x
second (x,y) = y

{-
Main> first (2,4)
2
Main> second (2,4.5)
4.5
-}

{- 9:
-}

{-
The last functions (first and second) are extremely polymorphic. We can use it on both types and functions. The below example shows that :type of first will output the type of the function (or type) in the first position. So for :type first(add,fact) we see that the function takes two inputs of type num, which outputs a function that takes two nums that then output an answer of that type. 
Main> :type first(add,fact)
first (add,fact) :: (Num a, Num b) => (a,a) -> a
-}
{- 
What is shown below is that the Haskell interpreter is trying to show a function but it can't print a function
-}
{-
Main> first (add,fact)
ERROR - Cannot find "show" function for:
*** Expression : first (add,fact)
*** Of type    : (Integer,Integer) -> Integer
-}

{- 10: The type structure is such that listlength takes a number, puts it into a list, and then returns some number.
-}

listlength [] = 0
listlength (x:rest) = 1 + listlength(rest)

{-
Main> listlength [1,2,3,4]
4
-}

{-
Main> :type listlength
listlength :: Num a => [b] -> a

-}